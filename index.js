require('dotenv').config();
const {Bot, GrammyError, HttpError, Keyboard, InlineKeyboard} = require('grammy');
const {hydrate} = require("@grammyjs/hydrate");

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());


bot.api.setMyCommands([
	{
		command: 'start', description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
	},
	{
		command: 'mood',
		description: "–û—Ü–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
	},
	{
		command: 'share',
		description: "–ü–æ–¥–µ–ª–∏—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏",
	},
	{
		command: 'inline_keyboard',
		description: "–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
	},
	{
		command: 'menu',
		description: "–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é",
	},
]);

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ç–∞—Ä–∞ –ë–æ—Ç–∞
bot.command('start', async (ctx) => {
	await ctx.react('‚ù§‚Äçüî•');
	await ctx.reply('–ü—Ä–∏–≤–µ—Ç, —è –ú–æ–∞–Ω–Ω–∞, –î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú–æ—è –í–æ–ª—à–µ–±–Ω–∞—è –ì—Ä—É–ø–ø–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º: <a href="https://t.me/moanna_be_life_official">–°—Å—ã–ª–∫–∞</a>', {
		reply_parameters: {message_id: ctx.msg.message_id},
		parse_mode: 'HTML',
		// disable_web_page_preview: true
	});
});

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const menuKeyboard = new InlineKeyboard().text('–£–∑–Ω–∞—Ç—å –ø—Ä–æ –ö—É—Ä—Å', "course-info").text('–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ', "support");
const backKeyboard = new InlineKeyboard().text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', "back");


bot.command('menu', async (ctx) => {
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
		reply_markup: menuKeyboard
	});
});

bot.callbackQuery('course-info', async (ctx) => {
	await ctx.answerCallbackQuery();
	await ctx.callbackQuery.message.editText('–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ö—É—Ä—Å—ã', {
		reply_markup: backKeyboard,
	});
});	

bot.callbackQuery('support', async (ctx) => {
	await ctx.answerCallbackQuery();
	await ctx.callbackQuery.message.editText('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å', {
		reply_markup: backKeyboard,
	});
});
bot.callbackQuery('back', async (ctx) => {
	await ctx.answerCallbackQuery();
	await ctx.callbackQuery.message.editText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
		reply_markup: menuKeyboard,
	});
});





bot.command('mood', async (ctx) => {
	// –°–ø–æ—Å–æ–±—ã —Ä–∞–±–æ—Ç—ã —Å –ö–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
	// const moodKeyboard = new Keyboard().text('Good').row().text("Normal").row().text("Bad").resized();
	const moodLabels = ["Good", "Normal", "Bad"];
	const rows = moodLabels.map((label) => {
		return [Keyboard.text(label)];
	});
	const moodKeyboard2 = Keyboard.from(rows).resized();

	await ctx.reply('–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', {
		reply_markup: moodKeyboard2,
	});
});



bot.command('share', async (ctx) => {
	const shareKeyboard = new Keyboard().requestLocation('Geolocation').row().requestContact('Contacts').row().requestPoll('Ask').placeholder('–£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ').resized();

	await ctx.reply('–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?', {
		reply_markup: shareKeyboard
	});
});


bot.command('inline_keyboard', async (ctx) => {
	// const inlineKeyboard = new InlineKeyboard().text('1', 'card-1').text('2', 'card-2').text('3', 'card-3');

	const inlineKeyboard = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª', 'https://t.me/moanna_be_life_official')

	await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É', {
		reply_markup: inlineKeyboard
	});
})


// Command Inline Keyboard card-[1-3] –ö–∞—Ä—Ç—ã –æ—Ç 1 –¥–æ 30
// bot.callbackQuery(/card-[1-3]/, async (ctx) => {
	// await ctx.answerCallbackQuery();
	// await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: ${ctx.callbackQuery.data}`);
// });

bot.on('callback_query:data', async (ctx) => {
	await ctx.answerCallbackQuery();
	await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: ${ctx.callbackQuery.data}`);
});


// Command Share
bot.on(':contact', async (ctx) => {
	await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç');
});

// Command moods
bot.hears('Good', async (ctx) => {
	await ctx.react('üëç');
	await ctx.reply('–ú–º–º–º –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!', {
		reply_markup: {remove_keyboard: true}
	});
});

// –í –º–∞—Å—Å–∏–≤–µ –º—ã –º–æ–∂–µ–º —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ü—Ä–∏–≤–µ—Ç—Å–≤–∏—è –∏ –°—Ç–∞—Ä—Ç–∞ –ë–æ—Ç–∞
// bot.command(['start', 'hello_moanna', 'hello'], async (ctx) => {
// 	await ctx.reply('–ü—Ä–∏–≤–µ—Ç, —è –ú–æ–∞–Ω–Ω–∞, –î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
// })


// –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 'message:text' ['message:photo/video' = :mdeia] 'message:voice' —ç—Ç–æ —á—Ç–æ –ø–æ—Å—ã–ª–∞–µ—Ç –Ω–∞–º –ö–ª–∏–µ–Ω—Ç
// –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
// bot.hears(['–ü–∏–Ω–≥', 'Magic'], async (ctx) => {
// 	await ctx.reply('I know this text');
// });

//–£–∑–Ω–∞—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞.
// bot.hears('ID', async (ctx) => {
// 	await ctx.reply(ctx.from.id);
// });

bot.on('message', async (ctx) => {
	await ctx.reply('–í–æ–ª—à–µ–±—Å—Ç–≤–æ –¥—É–º–∞–µ—Ç...');

	// Context = ctx –≠—Ç–æ –æ–±—å–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
	console.log(ctx.message);
	// console.log(ctx.from);
	// console.log(ctx.from.id);
});




// –û—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –§–∏–ª—å—Ç—Ä–∞–º
// bot.on('message').filter((ctx) => {
// 	return ctx.from.id === 480053772
// }, async (ctx) => {
// 	await ctx.reply("–Ø —Ç–µ–±—è —É–∑–Ω–∞–ª :)");
// });

// –î–æ–ª–∂–Ω—ã —Å–æ–ø–∞–¥–∞—Ç—å –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ë–æ—Ç–∞, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –§–æ—Ç–æ –∏ –•—ç—à—Ç–µ–≥
// bot.on(':photo').on('::hashtag', (ctx) => {

// })




// –õ–∏–±–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∏–ª–∏ URL, –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
// bot.on([':media', '::url'], async (ctx) => {
// 	await ctx.reply('–ü–æ–ª—É—á–∏–ª –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!');
// });
// bot.on(':voice', async (ctx) => {
// 	await ctx.reply("–Ø –ø–æ–ª—É—á–∏–ª –í–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å –∫ –í–∞–º —Å –æ—Ç–≤–µ—Ç–æ–º.");
// })
// bot.on('::email', async (ctx) => {
// 	await ctx.reply("–Ø –ø–æ–ª—É—á–∏–ª –í–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å –∫ –í–∞–º —Å –æ—Ç–≤–µ—Ç–æ–º.");
// })


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –û—à–∏–±–æ–∫
bot.catch((err) => {
	const ctx = err.ctx;
	console.error(`Error while handling update ${ctx.update.update_id}:`);
	const e = err.error;

	if(e instanceof GrammyError) {
		console.error("Error in request:", e.description);
	} else if(e instanceof HttpError) {
		console.error("Could not contact Telegram:", e);
	} else {
		console.error("Uknown error:", e);
	}
});

bot.start();